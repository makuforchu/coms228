import java.util.AbstractSequentialList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Iterator;
import java.util.ListIterator;
import java.util.NoSuchElementException;

//import org.graalvm.compiler.nodeinfo.NodeInfo;

/**
 * Implementation of the list interface based on linked nodes
 * that store multiple items per node.  Rules for adding and removing
 * elements ensure that each node (except possibly the last one)
 * is at least half full.
 */
public class StoutList<E extends Comparable<? super E>> extends AbstractSequentialList<E>
{
  /**
   * Default number of elements that may be stored in each node.
   */
  private static final int DEFAULT_NODESIZE = 4;
  
  /**
   * Number of elements that can be stored in each node.
   */
  private final int nodeSize;
  
  /**
   * Dummy node for head.  It should be private but set to public here only  
   * for grading purpose.  In practice, you should always make the head of a 
   * linked list a private instance variable.  
   */
  public Node head;
  
  /**
   * Dummy node for tail.
   */
  private Node tail;
  
  /**
   * Number of elements in the list.
   */
  private int size;
  
  /**
   * Constructs an empty list with the default node size.
   */
  public StoutList()
  {
    this(DEFAULT_NODESIZE);
  }

  /**
   * Constructs an empty list with the given node size.
   * @param nodeSize number of elements that may be stored in each node, must be 
   *   an even number
   */
  public StoutList(int nodeSize)
  {
    if (nodeSize <= 0 || nodeSize % 2 != 0) {
    	throw new IllegalArgumentException();
    }
    
    // dummy nodes
    head = new Node();
    tail = new Node();
    head.next = tail;
    tail.previous = head;
    this.nodeSize = nodeSize;
  }
  
  /**
   * Constructor for grading only.  Fully implemented. 
   * @param head
   * @param tail
   * @param nodeSize
   * @param size
   */
  public StoutList(Node head, Node tail, int nodeSize, int size)
  {
	  this.head = head; 
	  this.tail = tail; 
	  this.nodeSize = nodeSize; 
	  this.size = size; 
  }

  @Override
  public int size()
  {
    // TODO Auto-generated method stub
    return this.size;
  }
  
  @Override
  public boolean add(E item)
  {
    // TODO Auto-generated method stub

	  if(item == null) { 
		  throw new NullPointerException();
	  }
	  if( size  == 0) {
		  Node itema = new Node();
		  itema.addItem(item);
		  head.next = itema;
		  itema.previous = head;
		  itema.next = tail;
		  tail.previous = itema;
	  }
	  else {
		  if (tail.previous.count < nodeSize) {
				tail.previous.addItem(item);
			}
		  else {
		  Node itema = new Node();
		  itema.addItem(item);
		  Node temp = tail.previous;
		  temp.next = itema;
		  itema.previous = temp;
		  itema.next = tail;
		  tail.previous = itema;
		  }
	  }
	  size++;
    return true;
  }

  @Override
  public void add(int pos, E item)
  {
    // TODO Auto-generated method stub
	  
	  if (pos < 0 || pos > size) {
			throw new IndexOutOfBoundsException();
	  }

	  if (head.next == tail) {
		  add(item);
	  }

	  NodeInfo nodedata = search(pos);
	  Node temp = nodedata.node;
	  int offset = nodedata.offset;

		
	  if (offset == 0) {
		  if (temp.previous.count < nodeSize && temp.previous != head) {
			  temp.previous.addItem(item);
			  size++;
			  return;
		  }
			
		  else if (temp == tail) {
			  add(item);
			  size++;
			  return;
		  }
	  }
		
	  if (temp.count < nodeSize) {
		  temp.addItem(offset, item);
	  }
	
	  else {
		  Node succesor = new Node();
		  int counter = 0;
		  int mid = nodeSize / 2;
		  
		  while (counter < mid) {
			  succesor.addItem(temp.data[mid]);
			  temp.removeItem(mid);
			  counter++;
		  }

		  Node original = temp.next;

		  temp.next = succesor;
		  succesor.previous = temp;
		  succesor.next = original;
		  original.previous = succesor;

		  if (offset <= nodeSize / 2) {
			  temp.addItem(offset, item);
		  }
			
		  if (offset > nodeSize / 2) {
			  succesor.addItem((offset - nodeSize / 2), item);
		  }

	  }
	
	  size++;
	  

  }

  @Override
  public E remove(int pos)
  {
    // TODO Auto-generated method stub
	  
	  
	  if (pos < 0 || pos > size) {
			throw new IndexOutOfBoundsException();
	  }
  
	  NodeInfo nodedata = search(pos);
	  Node temp = nodedata.node;
	  int offset = nodedata.offset;
	  E removed = temp.data[offset];
	  

	  if (temp.next == tail && temp.count == 1) {
		  Node predecessor = temp.previous;
		  predecessor.next = temp.next;
		  temp.next.previous = predecessor;
		  temp = null;
		}

	  else if (temp.next == tail || temp.count > nodeSize / 2) {
		  temp.removeItem(offset);
	  }
		
	  else {
		  temp.removeItem(offset);
		  Node succesor = temp.next;
			
		
		  if (succesor.count > nodeSize / 2) {
			  temp.addItem(succesor.data[0]);
			  succesor.removeItem(0);
		  }
		
		  else if (succesor.count <= nodeSize / 2) {
			  for (int i = 0; i < succesor.count; i++) {
				  temp.addItem(succesor.data[i]);
			  }
			  temp.next = succesor.next;
			  succesor.next.previous = temp;
			  succesor = null;
		  }
	  }
		
	  size--;
	  return removed;
	  

  }

  /**
   * Sort all elements in the stout list in the NON-DECREASING order. You may do the following. 
   * Traverse the list and copy its elements into an array, deleting every visited node along 
   * the way.  Then, sort the array by calling the insertionSort() method.  (Note that sorting 
   * efficiency is not a concern for this project.)  Finally, copy all elements from the array 
   * back to the stout list, creating new nodes for storage. After sorting, all nodes but 
   * (possibly) the last one must be full of elements.  
   *  
   * Comparator<E> must have been implemented for calling insertionSort().    
   */
  public void sort()
  {
	  // TODO 
	  
	  E[] sortdata = (E[]) new Comparable[size];
	  
	  int cursor = 0;
	  Node temp = head.next;
	  while( temp != tail) {
		  for (int i =0; i< temp.count; i++) {
			  sortdata[cursor] = temp.data[i];
			  cursor++;
		  }
		  temp = temp.next;
	  }
	  
	  head.next = tail;
	  tail.previous = head;
	  
	  insertionSort(sortdata, new ItemComparator());
		size = 0;
		for (int i = 0; i < sortdata.length; i++) {
			add(sortdata[i]);
		}

	  
  }
  
  /**
   * Sort all elements in the stout list in the NON-INCREASING order. Call the bubbleSort()
   * method.  After sorting, all but (possibly) the last nodes must be filled with elements.  
   *  
   * Comparable<? super E> must be implemented for calling bubbleSort(). 
   */
  public void sortReverse() 
  {
	  // TODO 
	E [] sortdata  =  (E[]) new Comparable[size];
	int cursor = 0;
  	Node temp = head.next;
  	while(temp != tail) {
  		for (int i = 0; i< temp.count; i++) {
  			sortdata[cursor] = temp.data[i];
  			cursor++;
  		}
  		temp = temp.next;
  	}
  	head.next = tail;
  	tail.previous = head;
  	
  	bubbleSort(sortdata);
  	size = 0;
  	
  	for(int i = 0; 1 < sortdata.length; i++) {
  		add(sortdata[i]);
  	}
	  
	  
  }
  
  @Override
  public Iterator<E> iterator()
  {
    // TODO Auto-generated method stub
	  
    return new StoutListIterator();
  }

  @Override
  public ListIterator<E> listIterator()
  {
    // TODO Auto-generated method stub
    return new StoutListIterator();
  }

  @Override
  public ListIterator<E> listIterator(int index)
  {
    // TODO Auto-generated method stub
    return new StoutListIterator(index);
  }
  
  /**
   * Returns a string representation of this list showing
   * the internal structure of the nodes.
   */
  public String toStringInternal()
  {
    return toStringInternal(null);
  }

  /**
   * Returns a string representation of this list showing the internal
   * structure of the nodes and the position of the iterator.
   *
   * @param iter
   *            an iterator for this list
   */
  public String toStringInternal(ListIterator<E> iter) 
  {
      int count = 0;
      int position = -1;
      if (iter != null) {
          position = iter.nextIndex();
      }

      StringBuilder sb = new StringBuilder();
      sb.append('[');
      Node current = head.next;
      while (current != tail) {
          sb.append('(');
          E data = current.data[0];
          if (data == null) {
              sb.append("-");
          } else {
              if (position == count) {
                  sb.append("| ");
                  position = -1;
              }
              sb.append(data.toString());
              ++count;
          }

          for (int i = 1; i < nodeSize; ++i) {
             sb.append(", ");
              data = current.data[i];
              if (data == null) {
                  sb.append("-");
              } else {
                  if (position == count) {
                      sb.append("| ");
                      position = -1;
                  }
                  sb.append(data.toString());
                  ++count;

                  // iterator at end
                  if (position == size && count == size) {
                      sb.append(" |");
                      position = -1;
                  }
             }
          }
          sb.append(')');
          current = current.next;
          if (current != tail)
              sb.append(", ");
      }
      sb.append("]");
      return sb.toString();
  }
  


  /**
   * Node type for this list.  Each node holds a maximum
   * of nodeSize elements in an array.  Empty slots
   * are null.
   */
  private class Node
  {
    /**
     * Array of actual data elements.
     */
    // Unchecked warning unavoidable.
    public E[] data = (E[]) new Comparable[nodeSize];
    
    /**
     * Link to next node.
     */
    public Node next;
    
    /**
     * Link to previous node;
     */
    public Node previous;
    
    /**
     * Index of the next available offset in this node, also 
     * equal to the number of elements in this node.
     */
    public int count;

    /**
     * Adds an item to this node at the first available offset.
     * Precondition: count < nodeSize
     * @param item element to be added
     */
    void addItem(E item)
    {
      if (count >= nodeSize)
      {
        return;
      }
      data[count++] = item;
      //useful for debugging
      //      System.out.println("Added " + item.toString() + " at index " + count + " to node "  + Arrays.toString(data));
    }
  
    /**
     * Adds an item to this node at the indicated offset, shifting
     * elements to the right as necessary.
     * 
     * Precondition: count < nodeSize
     * @param offset array index at which to put the new element
     * @param item element to be added
     */
    void addItem(int offset, E item)
    {
      if (count >= nodeSize)
      {
    	  return;
      }
      for (int i = count - 1; i >= offset; --i)
      {
        data[i + 1] = data[i];
      }
      ++count;
      data[offset] = item;
      //useful for debugging 
//      System.out.println("Added " + item.toString() + " at index " + offset + " to node: "  + Arrays.toString(data));
    }

    /**
     * Deletes an element from this node at the indicated offset, 
     * shifting elements left as necessary.
     * Precondition: 0 <= offset < count
     * @param offset
     */
    void removeItem(int offset)
    {
      E item = data[offset];
      for (int i = offset + 1; i < nodeSize; ++i)
      {
        data[i - 1] = data[i];
      }
      data[count - 1] = null;
      --count;
    }    
  }
  
/**
* Helper class to represent a specific point of the list
*/
private class NodeInfo {
  public Node node;
  public int offset;
	
  public NodeInfo(Node node, int offset) {
	  this.node = node;
	  this.offset = offset;
	}
	
}
  
  /*
   * Helper method that finds elements in the node
   * 
   * @param pos which is the position of the item to be found
   * @return nodedata that reaturns the specific location of the item in the list
   */
  private NodeInfo search(int pos) {
	Node temp = head.next;
	int cindex = 0;
	while (temp != tail) {
		if (cindex + temp.count <= pos) {
			cindex += temp.count;
			temp = temp.next;
			if(pos == cindex) {
				NodeInfo nodedata = new NodeInfo(temp, pos - cindex);
				return nodedata;
			}
				continue;
			}
			NodeInfo nodedata = new NodeInfo(temp, pos - cindex);
			return nodedata;

	}
	return null;
}
  

 
  private class StoutListIterator implements ListIterator<E>
  {
	// constants you possibly use ...   
	  public E[] data;
	  
	// instance variables ... 
	  
	  /*
	   * The direction the cursor moving backwards
	   */
	  private static final int BEHIND = -1;
	  
	  /*
	   * The direction of the cursor, moving forward
	   */
	  private static final int AHEAD = 1;
	  
	  /*
	   * The cursor has no direction
	   */
	  private static final int NONE = 0;
	  
	  /*
	   * Holds the node that was last returned
	   */
	  private Node current;
	  
	  /*
	   * Holds the index of the node that was last returned
	   */
	  private  int index = 0;
	  
	  /*
	   * Holds the direction of the cursor, AHEAD or BEHIND
	   */
	  private int direction;
	  
    /**
     * Default constructor 
     */
    public StoutListIterator()
    {
    	// TODO 
    	index = 0;
    	//direction = BEHIND;
    	reset();
    }

    /**
     * Constructor finds node at a given position.
     * @param pos
     */
    public StoutListIterator(int pos)
    {
    	// TODO 
    	index = pos;
    	//direction = BEHIND;
    	reset();
    	
    }

    @Override
    public boolean hasNext()
    {
    	// TODO 
    	return index < size;
    		
    }

    @Override
    public E next()
    {
    	// TODO 
    	if (!hasNext()) {
    		throw new NoSuchElementException();
    	}
    	else {
    		
    		direction = AHEAD;
    		//current = current.next;
    		return data[index++];
    	}
    }

    @Override
    public void remove()
    {
    	// TODO 
    	if (direction == AHEAD) {
			StoutList.this.remove(index - 1);
			reset();
			direction = BEHIND;
			--index;
			
			if (index < 0) {
				index = 0;
			}
			
		} else if (direction == NONE) {
			StoutList.this.remove(index);
			reset();
			direction = BEHIND;
			
			
		} else {
			throw new IllegalStateException();
		}
    	
    }

	@Override
	public boolean hasPrevious() {
		// TODO Auto-generated method stub\
	
		return index > 0;
	}

	@Override
	public E previous() {
		// TODO Auto-generated method stub

    	if (!hasPrevious()) {
    		throw new NoSuchElementException();
    	}
    	else {
    		
    		direction = NONE;
    		//current = current.next;
    		index--;
    		return data[index];
    	}
	}

	@Override
	public int nextIndex() {
		// TODO Auto-generated method stub
		return index;
	}

	@Override
	public int previousIndex() {
		// TODO Auto-generated method stub
		return index - 1;
	}

	@Override
	public void set(E e) {
		// TODO Auto-generated method stub
		if (direction == AHEAD) {
			NodeInfo nodedata = search(index - 1);
			nodedata.node.data[nodedata.offset] = e;
			data[index-1]= e;
		}
		else if (direction == NONE) {
			NodeInfo nodedata = search(index);
			nodedata.node.data[nodedata.offset] = e;
			data[index+1]= e;		}
		else {
			throw new IllegalStateException();
		}
		
		
	}

	@Override
	public void add(E e) {
		// TODO Auto-generated method stub
		if (e == null) {
			throw new NullPointerException();
		}

		StoutList.this.add(index, e);
		//index++;
		reset();
		direction = BEHIND;
		
		
		
	}
    
    // Other methods you may want to add or override that could possibly facilitate 
    // other operations, for instance, addition, access to the previous element, etc.
    // 
    // ...
    // 
	/*
	 * Helper method that puts the 
	 */
	private void reset() {
		data  =  (E[]) new Comparable[size];
		int cursor = 0;
    	Node temp = head.next;
    	while(temp != null) {
    		for (int i = 0; i< temp.count; i++) {
    			data[cursor] = temp.data[i];
    			cursor++;
    		}
    		temp = temp.next;
    	}
    	
	
  }
	
	

  }

  /**
   * Sort an array arr[] using the insertion sort algorithm in the NON-DECREASING order. 
   * @param arr   array storing elements from the list 
   * @param comp  comparator used in sorting 
   */
  private void insertionSort(E[] arr, Comparator<? super E> comp)
  {
	  // TODO
	  for (int i = 1; i < arr.length; i++) {
			E key = arr[i];
			int j = i - 1;

			while (j >= 0 && comp.compare(arr[j], key) > 0) {
				arr[j + 1] = arr[j];
				--j;
			}
			arr[j + 1] = key;
		}
	  
  }
  
 

  /**
   * Sort arr[] using the bubble sort algorithm in the NON-INCREASING order. For a 
   * description of bubble sort please refer to Section 6.1 in the project description. 
   * You must use the compareTo() method from an implementation of the Comparable 
   * interface by the class E or ? super E. 
   * @param arr  array holding elements from the list
   */
  private void bubbleSort(E[] arr)
  {
	  // TODO
	  int size = arr.length;
		for (int i = 0; i < size - 1; i++) {
			for (int j = 0; j < size - i - 1; j++) {
				if (arr[j].compareTo(arr[j + 1]) < 0) {
					E temp = arr[j];
					arr[j] = arr[j + 1];
					arr[j + 1] = temp;
				}
			}
		}
  }
  
  
  /*
   * Comparator that helps with insertion sort
   */
  class ItemComparator<E extends Comparable<E>> implements Comparator<E> {
		@Override
		public int compare(E e, E e1) {
			return e.compareTo(e1);
		}

	}
  
  }

  
  
  
